---

- hosts: all
  name: Apply common configuration
  roles:
    - firewall

# 
# Deploy kubernetes in microk8s. 
#
# This must be done first because it provides DNS and because
# credentials are created here that get passed to admins on 
# opus. 
#

- hosts: kube
  tags:
    - kube
  name: Configure microk8s on kube
  tasks:
    - name: Install microk8s by snap
      become: yes
      snap:
        classic: yes
        name:
          - microk8s

    - name: Add the user ubuntu to microk8s
      become: yes
      user:
        name: ubuntu
        groups: microk8s
        append: yes
 
    - name: Reset SSH to allow ubuntu int microk8s group.
      meta: reset_connection

    - name: Check if microk8s is running.
      shell: /snap/bin/microk8s status | grep -q "is not running" 
      register: microk8s_running
      ignore_errors: True 
      changed_when: False 
      
    - name: Start microk8s
      shell: /snap/bin/microk8s start 
      when: microk8s_running.rc == 0
    
    - name: Enable helm3 package manager.
      shell: |
        /snap/bin/microk8s status | grep -q "helm3: disabled" 
      register: microk8s_helm3
      ignore_errors: True 
      changed_when: False 
      
    - name: Enable Helm v3
      shell: /snap/bin/microk8s enable helm3 
      when: microk8s_helm3.rc == 0
    
    - name: Enable the registry.
      shell: |
        /snap/bin/microk8s status | grep -q "registry: disabled" 
      register: microk8s_registry
      ignore_errors: True 
      changed_when: False 
      
    - name: Enable the registry
      shell: /snap/bin/microk8s enable registry
      when: microk8s_registry.rc == 0

    - name: Allow traffic from micro8s cni0 interface
      become: yes
      ufw:
        rule: allow
        interface: cni0
        direction: in
     
    - name: Allow traffic from micro8s cni0 interface
      become: yes
      ufw:
        rule: allow
        interface: cni0
        direction: out

    - name: Allow traffic to the Kubernetes API server
      become: yes
      ufw:
        rule: allow
        port: '16443'
        src: 172.30.5.0/24
        proto: tcp

    - name: Allow traffic to the microk8s container registry
      become: yes
      ufw:
        rule: allow
        port: '32000'
        src: 172.30.5.0/24
        proto: tcp
    
    - name: Allow forwarding
      become: yes
      ufw:
        rule: allow
        route: yes

    - name: Get micro8s configuration file. 
      delegate_to: kube
      raw: '/snap/bin/microk8s config'
      register: micro8s_secret
      changed_when: False

    - name: Save the kubectl config file locally. 
      local_action: copy content={{ micro8s_secret.stdout }} dest=roles/admins/secrets/kube-config

#
# Configure opus our main login server. 
#
- hosts: opus
  tags:
    - opus
  name: Packages and users.
  become: yes
  roles:
    - admins
  tasks:
    - name: Update the package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
    - name: Install packages
      package:
        name:
          - zsh
          - python3-pip
          - fontconfig
          - docker.io
        state: latest
    - name: Install snaps
      snap:
        classic: yes
        name:
          - kubectl
    - name: Allow admins to nopassword sudo 
      blockinfile: 
        path: /etc/sudoers.d/99-cis-users
        create: yes
        block: |
          %sudo ALL=(ALL) NOPASSWD:ALL
        
#
# Deploy jupyterhub 
#
- name: Install JupyterHub on jupyter.cis.cabrillo.edu
  hosts: jupyter
  tags:
    - jupyter
  become: true
  roles:
    - admins
  tasks: 

    - name: Add caddy repository. 
      apt_repository:
        repo: deb [trusted=yes] https://apt.fury.io/caddy/ / 
        state: present
        filename: caddy

    - name: Install caddy
      apt:
        update-cache: yes
        pkg:
        - caddy

    - name: Configure caddy 
      copy:
        content: |
          jupyter.cis.cabrillo.edu

          reverse_proxy 127.0.0.1:8000
        dest: /etc/caddy/Caddyfile

    - name: Reload caddy
      service:
        name: caddy
        state: reloaded

    - name: Install packages. 
      apt:
        update_cache: yes
        pkg:
          - python3-pip
          - python3-venv
          - npm
          - nginx

    - name: Install newer node by snap
      snap:
        name: node
        channel: 10/stable
        classic: yes

    - name: Install Python wheel. 
      pip:
        virtualenv: /opt/jupyterhub
        virtualenv_command: /usr/bin/python3 -m venv
        name:
          - wheel 

    - name: Install JupyterHub.
      pip:
        virtualenv: /opt/jupyterhub
        virtualenv_command: /usr/bin/python3 -m venv
        name:
          - jupyterhub 
          - jupyterlab 
          - ipywidgets

    - name: Install JS components.
      npm:
        name: configurable-http-proxy
        global: yes

    - name: Create the JupyterHub configuration
      file:
        path: /opt/jupyterhub/etc/jupyterhub
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create default JupyterHub configuration 
      shell: /opt/jupyterhub/bin/jupyterhub --generate-config 
      args:
        chdir: /opt/jupyterhub/etc/jupyterhub
        creates: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py        

    - name: Set JupyterLab to the default interface
      lineinfile:
        path: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py
        regexp: 'c.Spawner.default_url'
        line: c.Spawner.default_url = '/lab' 

    - name: Set JupyterLab URL
      lineinfile:
        path: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py
        regexp: 'c.JupyterHub.bind_url'
        line: c.JupyterHub.bind_url = 'http://localhost:8000/'

    - name: Create the JupyterHub service 
      file:
        path: /opt/jupyterhub/etc/systemd
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Write JupyterHub serivce file. 
      blockinfile:
        path: /opt/jupyterhub/etc/systemd/jupyterhub.service
        create: yes
        block: |
          [Unit]
          Description=JupyterHub
          After=syslog.target network.target

          [Service]
          User=root
          Environment="PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/jupyterhub/bin"
          ExecStart=/opt/jupyterhub/bin/jupyterhub -f /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py

          [Install]
          WantedBy=multi-user.target

    - name: Install JupyterHub service. 
      file: 
        src: /opt/jupyterhub/etc/systemd/jupyterhub.service 
        dest: /etc/systemd/system/jupyterhub.service
        owner: root
        group: root
        state: link

    - name: Enable and start JupyterHub
      systemd:
        name: jupyterhub
        enabled: yes
        state: started

    - name: Enable Jupyterlab Widgets 
      shell:
        cmd: |
          . /opt/jupyterhub/bin/activate 
          export PATH="/snap/bin:$PATH"
          jupyter labextension install @jupyter-widgets/jupyterlab-manager

